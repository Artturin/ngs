name: Build
on: push

jobs:
  build-internal-apt:
    timeout-minutes: 5
    name: Build in ${{ matrix.compiler }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-20.04" ]
        version: [ "9", "10", "11" ]
        compiler: [ "gcc", "clang" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y man
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }}
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-pacman:
    timeout-minutes: 5
    name: Build in ${{ matrix.compiler }} (${{ matrix.container }})
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "archlinux:base-20220116.0.44468" ]
        compiler: [ "gcc", "clang" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          pacman -Sy --noconfirm man-db ${{ matrix.compiler }}
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-apt-gcc:
    timeout-minutes: 5
    name: Build in GCC
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "debian:11.1" ]
        version: [ "9", "10" ] # gcc 11 doesn't exist in debian apt
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          apt-get update
          apt-get install -y man g++-${{ matrix.version }}
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-apt-clang:
    timeout-minutes: 5
    name: Build in Clang
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "debian:11.1" ]
        version: [ "9", "11" ] # clang 10 doesn't exist in debian apt
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          apt-get update
          apt-get install -y man clang-${{ matrix.version }}
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-yum-gcc:
    timeout-minutes: 10
    name: Build in default GCC
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "fedora:34", "fedora:35", "amazonlinux:2" ]
    steps:
      - name: Install AmazonLinux deps needed specifically for GitHub action
        if: startsWith(matrix.container, 'amazonlinux')
        run: yum -y install tar xz gzip
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          yum -y install man gcc-c++
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-yum-clang:
    timeout-minutes: 10
    name: Build in default Clang
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "fedora:34", "fedora:35", "amazonlinux:2" ]
    steps:
      - name: Install AmazonLinux deps needed specifically for GitHub action
        if: startsWith(matrix.container, 'amazonlinux')
        run: yum -y install tar xz gzip
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          yum -y install man clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-external-centos7-gcc:
    timeout-minutes: 10
    name: Build in GCC
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      matrix:
        container: [ "centos:7" ]
        version: [ "9", "10", "11" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          yum -y install centos-release-scl epel-release sudo man
          yum -y install devtoolset-${{ matrix.version }}
      - name: Install and Test
        run: (source /opt/rh/devtoolset-${{ matrix.version }}/enable && ./install.sh && make tests test-installation)

  build-mac-gcc:
    timeout-minutes: 10
    name: Build in GCC
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "macOS-10.15" ]
        version: [ "9", "10", "11" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          brew install cmake ninja
          brew install gcc@${{ matrix.version }}
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

  build-mac-xcode:
    timeout-minutes: 15
    name: Build in Xcode
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "macOS-10.15" ]
        version: [ "10.3" ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Compiler
        run: |
          brew install cmake ninja
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: Install and Test
        run: (./install.sh && make tests test-installation)

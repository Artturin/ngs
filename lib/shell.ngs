# WIP
# XXX: Ugly hack to prevent direct output to stdout.
F '$()'(cp:CommandsPipeline) {
	cp.options .= without('top_level')
	if cp.options.get('x_top_level') {
		cp.options.top_level = cp.options.x_top_level
	}
	guard false
}

WEB_SERVER_DIR = Dir(".." / "ngs-web-ui").assert()
ENV.BROWSER = 'none'
web_server = $(cd:WEB_SERVER_DIR npm start &)
echo("Web server PID: ${web_server.processes[0].pid}")

PROXY_DIR = Dir(".." / "ngs-web-ui-proxy").assert()

# Hack - names, because parameters' types can only be identifiers
ServerHandler = net::ServerHandler
Server = net::Server
# Hack - on_listen() can happen for any ServerHandler, not necessarily the one used below.
F on_listen(sh:ServerHandler, s:Server) {
	super(sh, s)
	p = $(x_top_level:: cd:PROXY_DIR npx ts-node src/server.ts ../ngs/ngs-shell.sock &)
	echo("Proxy PID: ${p.processes[0].pid}")
	# TODO: open the web app
}

net::unix_json_rpc_server("ngs-shell.sock", ns {

	F eval(line:Str) {

		F transform(x) x

		F transform(a:Arr) {
        	guard a
        	guard all(a, Hash)
        	Table2::Table(a)
        }

		# Based on: F ````(cp:CommandsPipeline)
        F transform(pp:ProcessesPipeline) {
			processes = pp.processes
			guard processes
			p = processes[-1]
			r = Result({ p.stdout.decode({'process': p}) })
			guard r
			r.get().transform()
        }


		fname = '<shell line file>'

		section "Frequent testing assist" {
			if line == 't1' {
				line = 'aws ec2 describe-vpcs'
			}
			if line == 't2' {
				line = 'aws codepipeline list-pipelines'
			}
		}
		bytecode = compile(line, fname)
		# TODO: pass warnings
		#bytecode.meta().warnings.each(F(w) {
		#	wl = w.location
		#	warn("${fname}:${wl.first_line}:${wl.first_column} warning: ${w.message}")
		#})

		func = load(bytecode, "<shell line func>")
		result = func()
		echo("Result type ${result.Type().name}")
		result .= transform()
		echo("Result type after transform() ${result.Type().name}")
		result = ui::JsonData(result)
	}

	section "tests" {

		F test() {
			"test method active"
		}

		F test_add_one(n:Int) {
			n + 1
		}

		F test_div_by_zero() {
			1 / 0
		}
	}

})

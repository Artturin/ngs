doc Describes parameters of a method
type MethodParams(ArrLike)

F init(mp:MethodParams, f:Fun) {
	p = params(f).map(MethodParam)
	partitioned = p.partition(SplatMethodParam)
	super(mp, partitioned[1])
	a = mp.attrs()
	a.by_name = {}
	p.each_idx_val(F(idx, v) {
		v.idx = idx
		a.by_name[v.name] = v
	})
	a.arr_splat = partitioned[0].filter(ArrSplatMethodParam).Box(0)
	a.hash_splat = partitioned[0].filter(HashSplatMethodParam).Box(0)
}

doc Get the ArrSplatMethodParam
doc %RET - Box
F arr_splat(mp:MethodParams) mp.attrs().arr_splat

doc Get the HashSplatMethodParam
doc %RET - Box
F hash_splat(mp:MethodParams) mp.attrs().hash_splat

doc Get named parameter
F '[]'(mp:MethodParams, k:Str) mp.attrs().by_name[k]

doc Check whether named parameter exists.
F in(k:Str, mp:MethodParams) k in mp.attrs().by_name

TEST p = MethodParams(F(x, *args) 0); p.has("x") and p.has("args")
TEST p = MethodParams(F(x, *args) 0); p.has("xyz").not()

F Str(mp:MethodParams) {
	arr_splat = " arr_splat=" +? mp.attrs().arr_splat.map(Str).get('')
	hash_splat = " hash_splat" +? mp.attrs().hash_splat.map(Str).get('')
	"<${mp.typeof().name} ${mp.attrs().ArrLike}${arr_splat}${hash_splat}>"
}

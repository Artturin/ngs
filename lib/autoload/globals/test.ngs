doc Represents failed test.
type TestFail(Error)

doc Represents an informational, human readable message a successful test would present to the user.
type TestMessage(FullBox)

doc Initialize TestFail.
F init(tf:TestFail, message:Str) init(args())

# TODO show standard error output on one changing line instead of occupying a lot of space

doc Runs f as a test.
doc name - Human readable name of the test.
doc f - A Fun that will either throw TestFail, return TestMessage. Other values are ignored by the testing framework.
F test(name:Str, f:Fun) {
	echo("")
	echo("==================== TEST: $name ====================")
	if ENV.get('NGS_ONLY_TEST') {
		if ENV.NGS_ONLY_TEST != name {
			echo("+ Skipping test ${name} as NGS_ONLY_TEST is '${ENV.NGS_ONLY_TEST}'")
			return
		}
	}
	msg = f()
	if msg is TestMessage {
		echo("  OK: ${msg.get()}")
	} else {
		echo("  OK")
	}
}

doc EXPERIMENTAL! Do not use!
doc Runs f as a test in a test group
F test(results:TestsResults, group:Str, name:Str, f:Fun, critical:Bool=true) {
	if not(results.is_blocked_group(group)) {
		results.status(group, name, "Running")
		results.report(group, name, f.Result(), critical)
	}
}

doc A helper used by other assert_* methods. Please do not use directly.
doc %STATUS - internal
F assert_base(actual, expected, comparison, display_comparison, title:Str, ok_prefix='') {
	ok = comparison(actual, expected)
	not(ok) throws TestFail("$title: actual value is $actual while expected $display_comparison $expected")
	actual
}

TEST test; try assert_base(10, 100, (==), "equals", "test comparison") catch(e:TestFail) true
TEST test; assert_base(10, 10, (==), "equals", "test comparison") == 10

doc Assert equality. Throws TestFail.
doc %RET - actual
doc %EX - test("Heavy load on instance", {
doc %EX -   # do the load
doc %EX -   assert_eq(`curl -m 1 192.168.10.10/health`, 'OK')
doc %EX - })
F assert_eq(actual, expected, title:Str=null) {
	assert_base(actual, expected, (==), "to be equal to", title or "Data equality")
}

TEST test; try assert_eq(10, 100, "test comparison") catch(e:TestFail) true
TEST test; assert_eq(10, 10, "test comparison") == 10

doc Assert element is in an array (or other Eachable1). Throws TestFail.
doc %RET - actual
doc %EX - assert_in(10, [10, 2], "test in")
F assert_in(actual, expected, title:Str=null) {
	assert_base(actual, expected, in, "to be in", title or "Must be in")
}

TEST test; try assert_in(10, [1,2], "test in") catch(e:TestFail) true
TEST test; assert_in(10, [10, 2], "test in") == 10

doc Assert actual matches expected. Throws TestFail.
doc %RET - actual
doc %EX - assert_match("abc", /^a/, "test match") == "abc"
F assert_match(actual, expected, title:Str=null) {
	assert_base(actual, expected, (~), "to be in", title or "Data match")
}

TEST test; try assert_match("abc", /^b/, "test match") catch(e:TestFail) true
TEST test; assert_match("abc", /^a/, "test match") == "abc"

doc Assert actual is a Bool. Throws TestFail.
doc %RET - actual
F assert_bool(actual, title:Str=null) {
	assert_base(actual, "a Bool", X is Bool, "to be", title or "Data type (mis)match")
	actual
}

TEST test; try assert_bool(1) catch(e:TestFail) true
TEST test; try assert_bool("true") catch(e:TestFail) true
TEST test; assert_bool(true) == true
TEST test; assert_bool(false) == false

doc Assert actual is a Hash. Throws TestFail.
doc %RET - actual
F assert_hash(actual, title:Str=null) {
	assert_base(actual, "a Hash", X is Hash, "to be", title or "Data type (mis)match")
	actual
}

TEST test; try assert_hash(1) catch(e:TestFail) true
TEST test; assert_hash({}) == {}

doc Assert actual is an Arr. Throws TestFail.
doc %RET - actual
F assert_array(actual, title:Str=null) {
	assert_base(actual, "an Arr", X is Arr, "to be", title or "Data type (mis)match")
	actual
}

TEST test; try assert_array(1) catch(e:TestFail) true
TEST test; assert_array([]) == []

doc Assert actual is a string. Throws TestFail.
doc %RET - actual
F assert_string(actual, title:Str=null) {
	assert_base(actual, "a Str", X is Str, "to be", title or "Data type (mis)match")
	actual
}

TEST test; try assert_string(1) catch(e:TestFail) true
TEST test; assert_string("") == ""

doc Assert actual is a Hash and it has the expected keys. Throws TestFail.
doc %RET - actual
doc %EX - assert_hash_keys({}, ['kk'])  # Throws TestFail.
doc %EX - assert_hash_keys({'kk': 7}, ['kk'])  # OK
F assert_hash_keys(actual, expected:Arr, title:Str="Must be a hash with keys") {
	assert_hash(actual, title)
	expected.each(F(k) {
		assert_base(actual, "key '$k' exists", {has(actual, k)}, "to have", title)
	})
	actual
}

TEST test; try assert_hash_keys(1, []) catch(e:TestFail) true
TEST test; try assert_hash_keys({}, ['kk']) catch(e:TestFail) true
TEST test; assert_hash_keys({'kk': 7}, ['kk']) == {'kk': 7}

doc Assert actual is a Hash and it has the expected keys with expected values. Throws TestFail.
doc %RET - actual
doc %EX - assert_hash_keys_values({'kk': 7}, {'ll': 7})  # Throws TestFail
doc %EX - assert_hash_keys_values({'kk': 7, 'll': 8}, {'kk': 7})  # OK
F assert_hash_keys_values(actual, expected:Hash, title:Str="Must be a hash with keys and values") {
	assert_hash(actual, title)
	expected.each(F(k, v) {
		assert_base(actual, "key '$k' with value '$v'", {has(actual, k) and actual[k] == v}, "to have", title)
	})
	actual
}

TEST test; try assert_hash_keys_values(1, {}) catch(e:TestFail) true
TEST test; try assert_hash_keys_values({}, {'kk': 7}) catch(e:TestFail) true
TEST test; try assert_hash_keys_values({'kk': 7}, {'kk': 8}) catch(e:TestFail) true
TEST test; try assert_hash_keys_values({'kk': 7}, {'ll': 7}) catch(e:TestFail) true
TEST test; assert_hash_keys_values({'kk': 7, 'll': 8}, {'kk': 7}) == {'kk': 7, 'll': 8}

doc Assert actual is of at least specified length. Throws TestFail.
doc %RET - actual
F assert_min_len(actual, expected, title:Str=null) {
	assert_base(actual, expected, { len(A) >= expected }, "to have at least", title or "Data items count", ok_prefix="at least ")
	actual
}

TEST test; try assert_min_len("abc", 10) catch(e:TestFail) true
TEST test; assert_min_len("abc", 3) == "abc"

doc Assert process exits with the specified exit code. Throws TestFail.
doc %EX - p = $(true); assert_exit_code(p, 0)   # OK
doc %EX - p = $(false); assert_exit_code(p, 1)  # OK
doc %EX - p = $(false); assert_exit_code(p, 0)  # Throws TestFail
doc %RET - pp
F assert_exit_code(pp:ProcessesPipeline, expected:Int, title:Str=null) {
	pp.wait()
	assert_base(pp.processes[-1].exit_code, expected, (==), "to be equal to", title or "Exit code of process '${pp.processes[-1].command.argv.join(' ')}'")
	pp
}

TEST test; try assert_exit_code($(true), 10) catch(e:TestFail) true
TEST test; p = $(true); assert_exit_code(p, 0) == p
TEST test; p = $(false); assert_exit_code(p, 1) == p

doc Assert process has given output. Throws TestFail.
doc %EX - assert_output_has($(echo abc), /xyz/)        # Throws TestFail
doc %EX - p = $(echo abc); assert_output_has(p, /c$/)  # OK
F assert_output_has(pp:ProcessesPipeline, expected:RegExp, title:Str=null) {
	assert_base(Str(pp), expected, (~), "to match", title or "Output of process '${pp.processes[-1].command.argv.join(' ')}'")
	pp
}

TEST test; try assert_output_has($(echo abc), /xyz/) catch(e:TestFail) true
TEST test; p = $(echo abc); assert_output_has(p, /c$/) == p

doc Assert process has given output. Throws TestFail.
doc %EX - assert_output_has($(echo abc), "xyz")        # Throws TestFail
doc %EX - p = $(echo abc); assert_output_has(p, "bc")  # OK
F assert_output_has(pp:ProcessesPipeline, expected:Str, title:Str=null) {
	assert_base(Str(pp), expected, has, "to contain", title or "Output of process '${pp.processes[-1].command.argv.join(' ')}'")
	pp
}

TEST test; try assert_output_has($(echo abc), "xyz") catch(e:TestFail) true
TEST test; p = $(echo abc); assert_output_has(p, "bc") == p

doc Assert having specific element or substring (checks with "has"). Throws TestFail.
doc %EX - assert_has("abc", "xyz")  # Throws TestFail
doc %EX - assert_has([1,2,3], 3)    # OK
doc %RET - actual
F assert_has(actual, expected, title:Str=null) {
	assert_base(actual, expected, has, "to contain", title or "Data subset")
}

TEST test; try assert_has("abc", "xyz") catch(e:TestFail) true
TEST test; assert_has([1,2,3], 3) == [1,2,3]

doc Assert given host is resolvable. Uses "dig" command line utility. Retries "times" times, sleeping "sleep" seconds in between. Throws TestFail.
doc %EX - assert_resolvable("my_new_host.example.com")
doc %RET - don't count on return value
F assert_resolvable(h:Str, title:Str="Check that host is resolvable", times=45, sleep=2, check=Bool) {
	retry(times=times, sleep=sleep, title=title,
		body              = { `dig "+short" $h`.lines() }
		success_predicate = check
		fail_cb           = { throw TestFail("$title: no resolve for $h").set('host', h) }
	)
	h
}

doc Assert given path exists.
doc p - Str or Path
doc %RET - p
F assert_path_exists(p, title:Str="Check that path exists") {
	guard (p is Str) or (p is Path)
	Path(p) returns p
	throw TestFail("$title: Path ${p} does not exist").set('path', p)
}

type TestsResults

F init(tr:TestsResults) {
	tr.lock = Lock()
	tr.groups = {}
	tr.blocked_groups = {}
}

# TODO: maybe throw exception when adding to blocked group
F report(tr:TestsResults, group_name:Str, test_name:Str, result:Result, critical:Bool) {
	tr.lock.acquire({
		g = tr.groups.dflt(group_name, {})
		g[test_name] = if test_name in g and g[test_name] is Result {
			Result({ throw InvalidArgument("Test result for ${group_name}/${test_name} reported more than once") })
		} else {
			result
		}
		if critical and result is Failure {
			tr.blocked_groups[group_name] = true
		}
	})
	tr
}

F status(tr:TestsResults, group_name:Str, test_name:Str, s:Str) {
	tr.lock.acquire({
		g = tr.groups.dflt(group_name, {})
		g[test_name] = s
	})
}

F is_blocked_group(tr:TestsResults, group_name:Str) {
	tr.lock.acquire({
		group_name in tr.blocked_groups
	})
}

doc %RET - Lines
F inspect(tr:TestsResults) {
	tr.lock.acquire({
		collector/Lines()
			tr.groups.each(F(group_name, tests) {
				v = tests.values()
				ok = v.count(Success)
				failed = v.count(Failure)
				statuses = tests.filterv(Str).map("$X [$Y]")
				collect("${group_name}: ok=$ok failed=$failed total=${ok+failed} ${'running: ' +? statuses.join(', ')}")
			})
	})
}

F each_group_test(tr:TestsResults, cb:Fun) {
	tr.lock.acquire({
		tr.groups.each(F(group_name, tests) {
			tests.each(F(test_name, result) {
				cb(group_name, test_name, result)
			})
		})
	})
}

{ Table }
F Table(name:Str, tr:TestsResults) {
	total_ok = 0
	total_failed = 0
	t = tr.lock.acquire({
		collector {
			tr.groups.each(F(group_name, tests) {
				v = tests.values()
				collect({
					'group': group_name
					'ok': ok = v.count(Success)
					'failed': failed = v.count(Failure)
					'total': ok + failed
					'statuses': tests.filterv(Str).map("$X [$Y]") or null
				})
				total_ok += ok
				total_failed = failed
			})
		}
	})
	t.push({
		'group': 'TOTAL'
		'ok': total_ok
		'failed': total_failed
		'total': total_ok + total_failed
		'statuses': null
	})
	Table(name, t)
}

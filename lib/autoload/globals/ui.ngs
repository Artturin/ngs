ns {
	# WIP
	# Warning: low quality, hacky code

	global id
	doc Warning! Not sure about correctness!
	F id(t:Type) {
		m = t.meta()
		has_ns = m =~ {'ns': Namespace}
		not(has_ns) returns "ngs:type:${t.name}"
		if m.ns.meta().has(JsonData) {
			# Maybe :: separator here is not a good idea
			return "ngs:type:${m.ns.meta()[JsonData].ns}::${t.name}"
		}
		throw NotImplemented("id() for types in namespaces (without .meta()[JsonData].ns} is not implemented yet")
	}

	F _json_data_fields(x, fields:Arr) {
		{
			'type': id(x.typeof())
			'fields': fields.Hash({ JsonData(x.(A)) })
		}
	}

	F JsonData(x) throw NotImplemented("JsonData() for type ${x.typeof()} is not implemented yet").set(val=x)

	section "JsonData - scalars" {
		F JsonData(x) {
			guard x =~ AnyOf(Num, Str, Bool, Null)
			{ 'type': id(x.typeof()), 'value': x }
		}
		F JsonData(p:Path) { 'type': id(p.typeof()), 'value': p.path }
	}

	section "JsonData - lists" {
		F JsonData(a) {
			guard a =~ AnyOf(Arr, ArrLike)
			{ 'type': id(a.typeof()), 'items': a.map(JsonData) }
		}
	}

	section "JsonData - maps" {
		F JsonData(h) {
			guard h =~ AnyOf(Hash, HashLike)
			{
				'type': id(h.typeof())
				'items': h.map(F(k, v) [k.JsonData(), v.JsonData()])
			}
		}
	}

	F JsonData(c:Command) c._json_data_fields(%[argv])

	F JsonData(p:Process) p._json_data_fields(%[command executable pid exit_code exit_signal stdout stderr])

	doc Incorrect, should pass the whole pipeline
	F JsonData(p:ProcessesPipeline) p.processes[-1].JsonData()
	F JsonData(p:ProcessesPipeline) {
		guard p.processes.len() > 1
		throw NotImplemented()
	}

	F JsonData(rd:ResDef) rd.find().resources.map(JsonData)
	F JsonData(r:Res) r.Hash().without('def').JsonData().set(type=id(r.typeof()))

	section "AWS2" {
		# TODO: generalize
		AWS2.meta()[JsonData] = {'ns': 'AWS2'}
	}
}

ns {
	global tr, init

	type TrContext(MatchContext)

	F tr(x, pa:PatternAction, tc:TrContext) {
		if (=~)(x, pa.pattern, tc) {
			return pa::action(x, tc).FullBox()
		}
		FullBox(x)
	}

	F tr(x:Eachable1, pa:PatternAction, tc:TrContext) {
		guard x !~ AnyOf(Int, Str)

		if (=~)(x, pa.pattern, tc) {
			return pa::action(x, tc).FullBox()
		}

		t = typeof(x)
		ret = t()  # XXX: Assumption about existence of the constructor
		tc.deeper({
			x.each_idx_val(F(idx, val) {
				t = tr(val, pa, tc.set_last_path_element(idx))
				ematch t {
					FullBox ret.push(t.get())
					EmptyBox null # do nothing
				}
			})
		})

		FullBox(ret)
	}

	F tr(x:Eachable2, pa:PatternAction, tc:TrContext) {

		if (=~)(x, pa.pattern, tc) {
			return pa::action(x, tc).FullBox()
		}

		t = typeof(x)
		ret = t()  # XXX: Assumption about existence of the constructor
		tc.deeper({
			x.each(F(key, val) {
				t = tr(val, pa, tc.set_last_path_element(key))
				ematch t {
					FullBox ret[key] = t.get()
					EmptyBox null # do nothing
				}
			})
		})

		FullBox(ret)
	}


	F tr(x, transformation) {
		tc = TrContext().set(_root=x, transformation=transformation)
		result = tr(x, transformation, tc)
		assert(result, FullBox, "Transformation failed, top level must return a value")
		result.get()
	}

	global reject
	doc Skips given item in output
	doc %EX Int -> reject
	F reject(x, tc:TrContext) EmptyBox()

	global descend
	F descend(tc:TrContext) {

	}

}
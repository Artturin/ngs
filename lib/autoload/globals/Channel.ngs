# TODO: synchronous adapters
# TODO: search "select vs epoll vs kqueue"
	# TODO: read http://docs.libuv.org/en/v1.x/design.html

ns {
	global Channel, FileChannel, ChannelPipeline, ChannelHandler, ChannelHandlerContext, ChannelEvent
	global Bool
	global init, push, fire, on_event
	doc Work in progress - https://github.com/ngs-lang/ngs/issues/526
	type Channel
		type FileChannel
	type ChannelPipeline
		# TODO in push/unshift: handlerAdded, handlerRemoved
	type ChannelHandler
	type ChannelHandlerContext

	type ChannelEvent(NamedInstances)
	ChannelEvent.NamedInstances = %[active read]

	section "Channel" {
		# src/main/java/io/netty/bootstrap/ServerBootstrap.java
		F init(c:Channel) {
			c.pipeline = ChannelPipeline(c)
		}

	}

	section "ChannelHandler" {
		F on_event(ch:ChannelHandler, chc:ChannelHandlerContext, ev:ChannelEvent, *args) chc.fire(ev, *args)
	}

	section "ChannelHandlerContext" {
		F init(chc:ChannelHandlerContext, handler:ChannelHandler) {
			chc.handler = handler
		}

		F fire(chc:ChannelHandlerContext, ev:ChannelEvent, *args) {
			if chc.next == null {
				warn('fire_on_active - no next')
				return
			}
			chc.next.on_event(ev, *args)
			chc
		}

		F on_event(chc:ChannelHandlerContext, ev:ChannelEvent, *args) {
			chc.handler.on_event(chc, ev, *args)
			chc
		}

		F inspect(chc:ChannelHandlerContext) "<${chc.typeof().name} TODO>"
	}

	section "ChannelPipeline" {
		F init(cp:ChannelPipeline, channel:Channel) {
			cp.channel = channel
			cp.head = null
			cp.tail = null
		}

		F Bool(cp:ChannelPipeline) cp.head != null

		F push(cp:ChannelPipeline, ch:ChannelHandler) {
			chc = ChannelHandlerContext(ch).set(prev=cp.tail, next=null)
			if cp {
				cp.tail.next = chc
				cp.tail = chc
			} else {
				cp.head = chc
				cp.tail = chc
			}
			cp
		}

		F fire(cp:ChannelPipeline, ev:ChannelEvent, *args) {
			assert(cp.head != null, 'on_active called on empty ChannelPipeline')
			cp.head.on_event(ev, *args)
		}

		F inspect(cp:ChannelPipeline) "<${cp.typeof().name} TODO>"

	}

	section "FileChannel" {
		F init(fc:FileChannel, f:File) {
			super(fc)
			fd = c_open(f.path, 'r')  # XXX: how about writing?
			fd <= 0 throws FileIOFail("Failed to open the file ${f.path}").set('file', f)
			fc.fd = fd
		}

		doc %EX - File("vm.h").Channel()  # <FileChannel fd=3>
		F Channel(f:File) FileChannel(f)

		# TODO: Keep in mind the `for line in File("1.txt") ...` use case
		F read(fc:FileChannel) {
			# Start async read operation
			# TODO: think about synchronous variant
		}
	}
}
# Channel().pipeline.push(ChannelHandler()).fire(ChannelEvent::active)

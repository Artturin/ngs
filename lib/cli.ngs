ns {
	# WIP, don't use!

	F help() {
		F e(s:Str) {
			echo(2, s)
		}
		e("Help - Running NGS")
		e("")
		e("Option 1: run an ngs script")
		e("  Run ngs with a file name as an argument:")
		e("  ngs MY_SCRIPT.ngs")
		e("")
		e("Option 2: use ngs as an interpreter")
		e("  Start your ngs script with the following line (without spaces in the beginning):")
		e("  #!/usr/bin/env ngs")
		e("  ... and remember to 'chmod +x' the script file")
		e("")
		e("Option 3: use one of the following switches:")
		e("  ngs -e EXPR     evaluate EXPR")
		e("  ngs -p EXPR     evaluate EXPR and print the result")
		e("  ngs -pl EXPR    evaluate EXPR and print each element of result on it's own line")
		e("  ngs -pj EXPR    evaluate EXPR, convert the result to JSON and print it")
		e("  ngs -pjl EXPR   evaluate EXPR, convert each element of the result to")
		e("                  JSON and print one element per line")
		e("  ngs -pi EXPR    evaluate EXPR and print inspection (detailed information) of the result")
		e("")
		e("For more information, see NGS site at https://ngs-lang.org/")
	}

	F make_prompt() {
		cli_prompt.map(F(k, v) v()).join(' ')
	}

	# XXX: Ugly hack to prevent direct output to stdout.
	#      It's okayish because since we are in CLI mode
	#      none of the commands can be "top level".
	#      A real fix would be somehow let compiler know it's not a top-level.
	# XXX: Do this after rc files are executed !
	F '$()'(c:Command) {
		c.options .= without('top_level')
		guard false
	}

	F run_cli_rc_files() {
		rc_files = ['/etc/ngs/cli.rc.ngs']
		if 'HOME' in ENV {
			rc_files.push("${ENV['HOME']}/.ngs/cli.rc.ngs")
		}
		rc_files.filter(Path).each(F(f) {
			debug("[CLI] Loading RC file $f")
			require(f)
		})
	}

	F main() {

		if not(ENV.has('NGS_DEV_CLI')) {
			F e(s:Str) {
				echo(2, s)
			}
			e("You have started NGS with no command line arguments.")
			e("In future this will invoke the CLI (shell). Currently the CLI is not implemented yet.")
			e("")
			help()
			exit(1)
		}

		debug('Starting NGS CLI')

		echo('*** NGS CLI is under construction ***')
		echo('| After successful command, R variable contains the result')
		echo('| After unsuccessful command, E variable contains the exception')

		not(0.isatty() and 1.isatty()) throws Error("CLI only runs when attached to a TTY")

		screen_renderer = Screen::Renderer()

		run_cli_rc_files()

		rl = FFI(cli_readline_lib, 'readline', c_ffi_type_string, [c_ffi_type_string])

		while true {
			line = rl(make_prompt())
			if line is Null {
				echo('')
				echo('BYE')
				break
			}
			line == "" continues


			had_error = false
			try {
				program_bytecode = compile(line, '<cli-entered-line>')
				program_func = load(program_bytecode, 'cli_entered_line')
				result = program_func()
			} catch(e:Exception) {
				global E = e
				echo("ERROR: $e")
				had_error = true
			}
			had_error continues

			if(result is Process) {
				result.wait()
			}

			global R = result
			s = Str(result)
			if('\n' in s) {
				echo("RESULT:")
				s.split('\n').each(F(line) {
					echo("  $line")
				})
			} else {
				echo("RESULT: $s")
			}

		}
	}

	# --- Start ---

	cli_readline_lib = 'libreadline.so.6'

	# TODO: make it object, not a string
	cli_prompt = {
		'ngs': F() 'NGS'
		'dir': F() {
			# TODO: replace HOME dir with ~
			p = $(pwd).Str()
			p[0..len(p)-1]
		}
		'gt': F() '> '
	}

}